Here is a comprehensive guide for **database modeling** of the Cottage 4.0 marketplace project according to your steps:

***

# Database Modeling for Cottage 4.0

***

## 1. Purpose of this Project
Build a **role-based hybrid agricultural marketplace** where:
- Farmers auction their raw produce.
- Processing and finished product cottagers sell goods directly.
- Buyers participate in auctions or direct purchases.
- Admin manages the platform users, auctions, orders, and compliance.
The DB must support real-time bidding, user management, KYC, contracts, orders, and analytics with secure, scalable structure.

***

## 2. Major Functional Requirements (Summary)
- Role-based user registration and KYC document management.
- Auction creation, bidding, and status tracking.
- Product listing for direct sales.
- Order management, cart, payments, and delivery tracking.
- Notifications and audit logs.
- Admin controls for user approvals and platform monitoring.

***

## 3. Identify Entities (Tables)

| Entity               | Purpose                                      |
|----------------------|----------------------------------------------|
| Users                | All platform users (farmers, cottagers, buyers, admins) with roles |
| UserProfiles         | Detailed profile info and KYC document records |
| Auctions             | Auction events created by farmers             |
| Bids                 | Individual bids on auctions                    |
| Products             | Listed items for direct sale by cottagers     |
| Orders               | Buyer orders for products or auction wins     |
| OrderItems           | Details of products within an order             |
| Notifications        | Push/Email alerts for users                    |
| Contracts            | Agreements for auction wins                    |
| Roles                | Definitions of user roles                       |
| Categories           | Product and produce categories                  |
| AuditLogs            | Record of critical actions for security/audit |
| PaymentDetails       | Payment and transaction info                    |

***

## 4. Relationships Between Tables

- **Users** 1–1 **UserProfiles**
- **Users** 1–many **Auctions** (farmers create auctions)
- **Auctions** 1–many **Bids**
- **Users** 1–many **Bids** (bidders)
- **Users** 1–many **Products** (cottagers list products)
- **Users** 1–many **Orders** (buyers place orders)
- **Orders** 1–many **OrderItems**
- **OrderItems** many–1 **Products**
- **Auctions** 1–1 **Contracts** (winning contract)
- **Users** many–1 **Roles**
- **Products** many–1 **Categories**
- **Users** 1–many **Notifications**
- All major tables reference user IDs for owner/actioner
- AuditLogs reference users and actions timestamps

***


# Cottage 4.0 Database Schema Design

***

## Entities & Fields

### 1. Users Table
Stores core user authentication and role information.

| Column          | Type           | Constraints                      | Description                                  |
|-----------------|----------------|---------------------------------|----------------------------------------------|
| user_id         | UUID (Primary) | PRIMARY KEY                     | Unique user identifier                       |
| email           | VARCHAR        | UNIQUE, NOT NULL                | User email (verified)                        |
| phone           | VARCHAR        | UNIQUE, NOT NULL                | Phone number with OTP verification           |
| password_hash   | VARCHAR        | NOT NULL                       | Hashed password for authentication          |
| role            | ENUM           | NOT NULL (farmer, cottager, buyer, admin) | User role                                    |
| created_at      | TIMESTAMP      | DEFAULT CURRENT_TIMESTAMP       | Account creation date                        |
| last_login      | TIMESTAMP      |                                | Last login timestamp                          |

***

### 2. UserProfiles Table
Stores extended user data and KYC documents based on roles.

| Column            | Type         | Constraints                   | Description                                      |
|-------------------|--------------|------------------------------|-------------------------------------------------|
| profile_id        | UUID (PK)    | PRIMARY KEY                  | Unique profile ID                               |
| user_id           | UUID         | UNIQUE, FOREIGN KEY → Users  | Links profile to user                            |
| full_name         | VARCHAR      | NOT NULL                     | User's full name                                |
| profile_photo_url | TEXT         |                              | Link to profile image                            |
| address           | TEXT         |                              | Permanent or business address                    |
| kyc_documents     | JSON         |                              | URLs or references to KYC documents (Aadhaar, PAN, etc.) |
| land_documents    | JSON         | NULLABLE for cottagers/buyers| Land ownership or lease documents (farmers only)|
| bank_details      | JSON         | Encrypted                    | Bank account info for payouts                    |
| gst_number        | VARCHAR      | NULLABLE                     | GST number for business sellers                  |
| produce_types     | JSON Array   | NULLABLE                     | List of produce categories (farmers or cottagers)|
| business_name     | VARCHAR      | NULLABLE                     | Registered business/shop name for cottagers     |
| product_sample_images | JSON     | NULLABLE                     | Example product images (cottagers)               |
| verified          | BOOLEAN      | DEFAULT FALSE                | KYC/admin approval status                         |
| consent_policy    | BOOLEAN      | NOT NULL                    | User acceptance of terms/policies                 |

***

### 3. Auctions Table
Stores auctions created by farmers.

| Column           | Type        | Constraints              | Description                             |
|------------------|-------------|-------------------------|-----------------------------------------|
| auction_id       | UUID (PK)   | PRIMARY KEY             | Unique auction ID                      |
| farmer_id        | UUID        | FOREIGN KEY → Users     | Auction creator (must be farmer)      |
| title            | VARCHAR     | NOT NULL                | Auction title or produce name          |
| description      | TEXT        |                         | Auction description                    |
| reserve_price    | DECIMAL     | NOT NULL                | Minimum acceptable price               |
| quantity         | INT         | NOT NULL                | Quantity of produce                    |
| category_id      | UUID        | FOREIGN KEY → Categories| Produce category                       |
| start_time       | TIMESTAMP   | NOT NULL                | Auction start time                     |
| end_time         | TIMESTAMP   | NOT NULL                | Auction end time                       |
| status           | ENUM        | DEFAULT 'Scheduled'     | Scheduled, Live, Ended, Cancelled     |
| created_at       | TIMESTAMP   | DEFAULT CURRENT_TIMESTAMP| Creation timestamp                    |

***

### 4. Bids Table
Tracks all bids placed on auctions.

| Column         | Type         | Constraints              | Description                         |
|----------------|--------------|-------------------------|-------------------------------------|
| bid_id         | UUID (PK)   | PRIMARY KEY             | Unique bid ID                      |
| auction_id     | UUID        | FOREIGN KEY → Auctions  | Related auction                    |
| bidder_id      | UUID        | FOREIGN KEY → Users     | Bidder user ID                    |
| amount         | DECIMAL     | NOT NULL                | Bid amount                       |
| bid_time       | TIMESTAMP   | DEFAULT CURRENT_TIMESTAMP | Bid placement time               |

***

### 5. Products Table
Products listed for direct sale by processing and finished product cottagers.

| Column          | Type        | Constraints              | Description                         |
|-----------------|-------------|-------------------------|-----------------------------------|
| product_id      | UUID (PK)   | PRIMARY KEY             | Unique product ID                 |
| seller_id       | UUID        | FOREIGN KEY → Users     | Product seller (cottager)         |
| category_id     | UUID        | FOREIGN KEY → Categories| Product category                  |
| name            | VARCHAR     | NOT NULL                | Product name                     |
| description     | TEXT        |                         | Detailed product description      |
| price           | DECIMAL     | NOT NULL                | Fixed price for direct sale       |
| stock           | INT         | DEFAULT 0               | Available quantity               |
| images          | JSON        |                         | URLs to product images             |
| created_at      | TIMESTAMP   | DEFAULT CURRENT_TIMESTAMP| When product was listed           |

***

### 6. Orders Table

| Column           | Type        | Constraints              | Description                      |
|------------------|-------------|-------------------------|---------------------------------|
| order_id         | UUID (PK)   | PRIMARY KEY             | Unique order ID                 |
| buyer_id         | UUID        | FOREIGN KEY → Users     | Buyer user ID                   |
| total_amount     | DECIMAL     | NOT NULL                | Total price of the order        |
| status           | ENUM        |                         | Pending, Confirmed, Shipped, Delivered, Cancelled, Returned |
| order_date       | TIMESTAMP   | DEFAULT CURRENT_TIMESTAMP| Date of order placement         |
| shipping_address | TEXT        | NOT NULL                | Address for delivery            |
| payment_status   | ENUM        |                         | Pending, Paid, Failed, Refunded |

***

### 7. OrderItems Table
Details of products included in an order.

| Column         | Type        | Constraints              | Description                     |
|----------------|-------------|-------------------------|---------------------------------|
| item_id        | UUID (PK)   | PRIMARY KEY             | Unique item ID                  |
| order_id       | UUID        | FOREIGN KEY → Orders    | Related order                  |
| product_id     | UUID        | FOREIGN KEY → Products  | Product ordered                |
| quantity       | INT         | NOT NULL                | Number of units                |
| unit_price     | DECIMAL     | NOT NULL                | Price per unit at purchase time|

***

### 8. Categories Table

| Column       | Type        | Constraints           | Description               |
|--------------|-------------|----------------------|---------------------------|
| category_id  | UUID (PK)   | PRIMARY KEY          | Unique category ID        |
| name         | VARCHAR     | NOT NULL             | Category name             |
| description  | TEXT        |                      | Optional category details |

***

### 9. Notifications Table

| Column        | Type        | Constraints          | Description                     |
|---------------|-------------|---------------------|---------------------------------|
| notification_id | UUID (PK) | PRIMARY KEY         | Unique ID                      |
| user_id       | UUID        | FOREIGN KEY → Users | Recipient user                 |
| type          | VARCHAR     | NOT NULL            | Type of notification (bid, order, admin) |
| message       | TEXT        | NOT NULL            | Notification message           |
| is_read       | BOOLEAN     | DEFAULT FALSE       | Read/unread status             |
| created_at    | TIMESTAMP   | DEFAULT CURRENT_TIMESTAMP | Time of notification       |

***

### 10. Contracts Table

| Column         | Type         | Constraints          | Description                      |
|----------------|--------------|---------------------|---------------------------------|
| contract_id    | UUID (PK)    | PRIMARY KEY         | Contract unique ID              |
| auction_id     | UUID         | FOREIGN KEY → Auctions | Related auction               |
| farmer_id      | UUID         | FOREIGN KEY → Users   | Farmer involved                |
| buyer_id       | UUID         | FOREIGN KEY → Users   | Buyer involved                |
| signed_at      | TIMESTAMP    |                     | Timestamp of signing           |
| document_url   | TEXT         |                     | Link to stored contract document|

***

## Indexing & Constraints Recommendations
- Unique indexes on user email and phone.
- Foreign key constraints enforce referential integrity.
- Enums for role, auction status, order status ensure consistent values.
- JSON used for flexible KYC documents and images storage references.
- Timestamp defaults support audit and sorting needs.

***

## Notes on Implementation for Firebase Firestore (NoSQL):
- Collections correspond to above tables.
- Documents store fields as above; references replace foreign keys.
- Nested maps/arrays for JSON fields like `kyc_documents`, `images`.
- Use security rules to enforce role-based data access and validation.
- Use Cloud Functions for transactional operations like bidding and order updates.

***

This schema captures **every critical entity, attribute, relationship, and constraint** needed for robust platform functionality, meeting your detailed data storage and compliance goals for Cottage 4.0.